本项目是基于net/rpc中定义的编码器接口实现的远程过程调用框架，该框架除了基本的远程过程调用功能外，还新增了超时处理、
负载均衡、服务发现、http协议支持、注册中心等功能，同时自定义的编码器基于ProtoBuf协议进行数据序列化，可以自定义服务
支持多种压缩格式。在整个框架中，一共定义了四种实体，分别是客户端、服务器、注册中心和编码器。编码器封装了建立的tcp连接，
这里基于net/rpc的编码器接口分别实现了gob和protobuf两种序列化协议的编码器，定义了一组请求和响应消息的头部，支持扩展
自定义协议，使用binary实现消息头的序列化和反序列化，编码器接口定义了四个方法，分别是读消息头、读消息体、写消息、关闭
函数。对于客户端，实现了两种客户端，分别是正常客户端和集成了服务发现模块的客户端，对于正常客户端，需要实现对调用生命周
期的管理、调用信息发送、调用结果接收等功能，在实现过程中，将每次调用请求进行了抽象，抽象为Call类，Call表示一次正在执
行的调用请求，包含了调用方法、传入参数、返回结果、错误、信号channel等信息，在客户端进行调用时会生成Call并注册到客户
端，当调用返回时从客户端删除对应的Call，并通过信号channel向调用者传递结束信号，客户端有两个核心函数，send和receive
，send接受Call并注册Call到客户端，同时将Call转换为rpc请求，使用编码器将请求编码发送给服务器，receive通过编码器接
收来自服务器的请求响应，并根据响应的序号从客户端获取对应的Call并注销，传递结束信号，在创建客户端时会启动一个receive
的goroutine等待服务器的响应。客户端对外提供了两种调用方法Go和Call，分别代表异步式调用和同步式调用，通过选择对信号
channel读信号的时机来实现。集成了服务发现模块的客户端主要维护了一个服务发现模块和一个客户端缓存，客户端缓存用map实现，
用来缓存已经建立的客户端，对外提供了两种两种调用方法Call和Broadcast，使用Call进行调用时会使用服务发现模块获得一个服
务器地址然后创建对应的Client发起调用，在创建过程中会先尝试从缓存中获取，获取不到或Client不可用创建新客户端来执行并
加入缓存，Client在创建时会发起一个定时goroutine，定时关闭Client。
对于服务器，需要实现服务注册和请求响应，对于服务注册功能，服务器对外提供方法Register进行服务注册，使用结构体定义一个服务，
结构体的方法定义为该服务可以提供的方法，将服务和方法抽象成了methodType和service两个类，服务器维护多个service
，当服务器收到一个服务注册请求后，会利用reflect对结构体进行解析，获取结构体的类型信息和值信息，封装到service类中，
通过类型信息获取结构体拥有的方法信息并封装到methodType中，methodType也封装到service中，当进行请求调用时，会根据
请求的服务名和方法名获取对应的methType，然后利用reflect动态地创建方法对应的入参和返回结果并调用方法。对于请求响应，
服务器将每次请求抽象为RPCRequest类，包含请求头、参数反射对象、methodType和service类，服务器设定了三个主要函数，
readRequest、handleRequest和sendResponse，readRequest使用编码器读取请求的消息头和消息体，根据信息生成RPCRequest
实例，sendResponse使用编码器将请求头和调用结果发送到客户端，handleRequest接收RPCRequest，根据RPCRequest调用从注册的
service查找对应的方法进行执行，并调用sendResponse返回调用结果。
对于注册中心，
